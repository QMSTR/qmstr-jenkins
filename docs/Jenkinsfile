node
{
    try
    {
        stage('clean') {
            cleanWs(deleteDirs: true,
                patterns: [
                    [pattern: 'qmstrcache', type: 'EXCLUDE'],
                    [pattern: 'qmstrcache/**', type: 'EXCLUDE'],
                    [pattern: '.git', type: 'EXCLUDE'],
                    [pattern: '.git/**', type: 'EXCLUDE']
            ])
            sh "ls -laR"
        }
        stage('Clone sources') {
            dir('qmstr') {
                checkout([$class: 'GitSCM',
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [],
                    submoduleCfg: [],
                    branches: [[name: "master"]],
                    userRemoteConfigs: [[url: "https://github.com/QMSTR/qmstr.git"]]])
                sh "git clean -fxd"
            }
        }
        stage('Compile qmstr') {
            dir("qmstr"){
                sh 'mkdir out'
                sh 'make democontainer'
                def mastername = sh(script: 'docker create qmstr/master', returnStdout: true)
                mastername = mastername.trim()
                sh "touch lib/go-qmstr/service/*.go"
                sh "docker cp ${mastername}:/usr/local/bin/qmstr out/"
                sh "docker cp ${mastername}:/usr/local/bin/qmstrctl out/"
                sh "docker rm ${mastername}"
                sh "touch out/*"
            }
        }
        stage('Generating docs statics file') {
            dir('qmstr') {
                docker.image('endocode/qmstr_buildenv:latest').inside {
                sh 'cd doc && git submodule init && git submodule update'
                sh 'make docs'
                }
            }
        }
        stage('Archive artifact') {
            archiveArtifacts 'qmstr/doc/qmstr-doc.tar.bz2'
        }
        stage('Publish report to website') {
            build job: '/qmstr-website/web-publisher', propagate: false
        }
    }
    catch (Exception e)
    {
        currentBuild.result = 'FAILURE'
    }
    finally {
        if (currentBuild.result == 'SUCCESS' && currentBuild.getPreviousBuild().result != 'SUCCESS') {
            googlechatnotification message: "Job ${env.JOB_NAME} ${env.BUILD_NUMBER} successfully finished. See ${env.BUILD_URL}", url: "id:qmstr_hangout_chat_webhook"
        }
        if (currentBuild.result == 'FAILURE') {
            googlechatnotification message: "Job ${env.JOB_NAME} ${env.BUILD_NUMBER} failed. See ${env.BUILD_URL}", url: "id:qmstr_hangout_chat_webhook"
        }
    }
}
